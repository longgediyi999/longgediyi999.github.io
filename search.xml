<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[面试题8月]]></title>
    <url>%2F2017%2F08%2F14%2F%E9%9D%A2%E8%AF%95%E9%A2%988%E6%9C%88%2F</url>
    <content type="text"><![CDATA[Doctype作用？标准模式与兼容模式各有什么区别? (1) Doctype 处于html第一行,处于html之前告诉浏览器解析以什么标准解析这个文档, doctype不存在会导致文档以兼容模式运行. (2) 标准模式运行和js运行模式运行都是以浏览器支持的最高标准运行, 在兼容模式中页面以宽松的向后兼容的方式展现,模拟老式浏览器以防止站点无法工作. HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt;？ 因为html5不基于SGML,因此不需要对DTD的引用,但是需要用doctype来规范浏览器的行为. 而html4基于sgml,需要对DTD进行引用,因此需要告诉浏览器文档使用的文档类型. 行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？ 首先,css规范规定,每个元素都有display的属性,用来确定该元素的类型,每个元素都有默认的display值, 行内元素有:a b span img input select strong 块级的元素有: div ol ul li dl dt dd h1-h.. p 空元素: &lt;br&gt; &lt;hr&gt; &lt;img&gt; input meta 页面导入样式时，使用link和@import有什么区别？ (1) link属于xhtml标签 除了加载css外还能用于定义rss,定义rel连接属性等作用; 而@import是css提供的只能用于加载css. (2) 页面被加载时 link会同时加载 而@import只会在页面被加载完毕才会加载 (3) import是css2.1的标签,只有ie5以上才能识别,而link是xhtml标签没有兼容问题 介绍一下你对浏览器内核的理解？ (1) 主要分为渲染引擎和js引擎. 渲染引擎:负责驱动网页的内容(html xml 图像等) 整理讯息(例如加入css等),以及计算网页的显示方式 然后输出到显示器,浏览器的内核的不同对于网页的语法解释也不同,所以渲染的效果也不相同,所有的网页 浏览器都需要内核. js引擎:解析js文件执行javascript来实现网页的动态效果 最开始js引擎和渲染引擎并没有明确的分别 但是后来js引擎越来越独立 内核倾向于渲染引擎.]]></content>
      <categories>
        <category>面试</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[bootstrap8月记录]]></title>
    <url>%2F2017%2F08%2F14%2Fbootstrap8%E6%9C%88%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[1.为了让bootstrap对移动设备更加友好需要在head引入 &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt; initial-scale 确保网页是1:1显示 user-scalable=no 可以禁用其缩放（zooming）功能。 通常情况下，maximum-scale=1.0 与 user-scalable=no 一起使用。这样禁用缩放功能后，用户只能滚动屏幕，就能让您的网站看上去更像原生应用的感觉。]]></content>
      <categories>
        <category>bootstrap</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[jQuery]]></title>
    <url>%2F2017%2F08%2F13%2FjQuery%2F</url>
    <content type="text"><![CDATA[标准选择器 $(&quot;#box&quot;).html //innerHtml id选择器 $(&quot;#box&quot;).text //innerText $(&quot;.add&quot;).css(&quot;backgorundColor&quot;,&quot;red&quot;); 获取所有的class名字为add的名字的标签 $(&quot;.add&quot;).css ({ &quot;backgorund&quot;: &quot;red&quot;, &quot;left&quot;:&quot;1px&quot;, }) $(&quot;li&quot;).css(&quot;&quot;,&quot;&quot;); //标签选择器 $(&quot;#box,span&quot;).css(&quot;&quot;,&quot;&quot;) 选择上id为box的与span标签 冰机选择器 $(&quot;span.abc&quot;).css(&quot;&quot;,&quot;&quot;) 带abc类选择器的span标签 前面可以加双引号 或者不加双引号 不加代表字符串 加代表套路 层级选择器 $(&quot;ul&gt;li&quot;).css(&quot;&quot;,&quot;&quot;); 子代选择器 $(&quot;ul li&quot;).css() 后代选择器 ul（id = oul） li li li li li li ul $(&quot;#oul&lt;li:eq(0)&quot;).css(); 选中下标为0的 也就是第一个 $(&quot;li:odd&quot;) 获取li里面 奇数的元素 $(&quot;li:even&quot;) 偶数元素 $(function(){}) $(&quot;#box&quot;).children(); 获取jq对象下面的一级子元素 $(&quot;#box&quot;).children(&quot;strong&quot;) 选择叫做strong的孩子 $(&quot;#box&quot;).find(&quot;span&quot;); 后代选择器 获取后代所有的span $(&quot;#box&gt;q:eq(2)&quot;).css(&quot;backgorundColor&quot;,&quot;red&quot;).sibings().css(&quot;&quot;,&quot;&quot;); 前面这个jq对象设置完属性返回的还是这个jq对象 然后继续让这个jq对象继续做后续操作 元素.sibings 抛出他本身以外所有的兄弟（一个父亲下的）元素都被选中 $(&quot;.aa&quot;).parent().css(&quot;&quot;,&quot;&quot;); aa的类选择器的标签的所有父亲被选中 如果想特定 要在parent()中添加 $(&quot;.aa&quot;).click(function() {} ) 用类选择器添加click事件的时候不需要for循环 jquery内部自动循环了 show() 显示 $(this).parent().siblings().find(&quot;div&quot;).hide(); 隐藏方法 $(document).ready(function(){alert(&quot;1&quot;);}); 等待dom元素加载完毕 windows.onload = function() {alert(&quot;test1&quot;)}; windows.onload = function() {alert(&quot;test2&quot;)}; 结果只会输出第二个语句 $(document).ready(function(){alert(1)}); $(document).ready(function(){alert(2)}); 两次都会输出 $(function(){}); 简化写法 var $cr = $(&quot;#cr&quot;); jq对象转dom var cr = $cr[0]; console.log(cr); console.log($cr); var cr = document.getElementById(&quot;cr&quot;); var $cr = $(cr); addClass 添加类 removeClass 移除类 hasClass() 判断是否有类 返回true false toggleClass(&quot;aa&quot;) 切换类 fadeIn 只改变透明不 不会隐藏元素 fadeOut fadeTo 可以把元素的不透明度以渐进的方式调整到指定的值 只调整元素的不透明度 fadeTo(600,0.2) animate({ width:100, left:10, height:100 },1000); 参数json 运动时间 （可选值：匀速或者swing） 回调函数 stop(); 不清楚动画队列 不跳转最后的效果 stop(true); 清楚动画队列 不跳转到最终效果 stop(true,true) 清楚动画队列 将当前动画直接跳转到最终效果 stop(false,true) 不清楚动画队列 后续动画有 当前动画停止 直接跳转到最后效果 gt(5):not(:last) 索引值大于5不大于最后一个的集合 按钮.toggle(function(){ //显示元素 },function(){ //隐藏元素 }) attr(&quot;属性名字&quot;) (jq拿到属性节点的操作方法) var $li_1 = $(&quot;&lt;li&gt;adsf&lt;/li&gt;&quot;); var $li_2 = $(&quot;&lt;li&gt;qwer&lt;/li&gt;&quot;); $(&quot;ul&quot;).append($li_1); $(&quot;ul&quot;).append($li_2); （ul已经有了） clone() 复制一个节点 if clone(true) 说明事件也一起复制 removeattr() 移除属性 next() 同辈节点 的 下一个 prev() 同辈节点的上一个 siblings() 同辈节点除了自己的所有 $(document).ready() dom加载完就可以 如果有多个 执行多次 window.onload等价于$(window).load(function{}); dom和资源都下载完 执行一次 后者覆盖前者 event.stopPropagation(); jq阻止时间冒泡 || return false event.preventDefault() 阻止默认行为 || return false 意义于对事件的停止 event.type() 事件类型 event.target.href 获取出发事件的属性值 unbind(&quot;事件&quot;,元素) 移除事件 如果不添加那么久移除所有事假 slideUp(5000) slideDown 改变高度 hide() show() 同时改变 元素的高度宽度 透明度 animate(params,speed,callback); params 元素要运动到的位置 speed 速度 callback 回调函数 如果在params +=500px 代表累加 意思为在此基础上 向右运动500px { left:&quot;500px&quot;, height:&quot;100px&quot; } 同时运动多个动画 同时发生 if(!$(element).is(&quot;:animated&quot;)){} 判断元素是否处于运动状态]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ceshitupian]]></title>
    <url>%2F2017%2F08%2F13%2Fceshitupian%2F</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[hexo经验]]></title>
    <url>%2F2017%2F05%2F11%2F1%20-%20%E5%89%AF%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[html代码块两个tab]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[重装（异地hexo）]]></title>
    <url>%2F2017%2F05%2F11%2F%E5%BC%82%E5%9C%B0hexo%2F</url>
    <content type="text"><![CDATA[重装系统之后hexo更新 安装git与node.js （注意版本） 一丶git本地仓库与github远成仓库关联1.Windows下打开Git Bash，创建SSH Key，按提示输入密码，可以不填密码一路回车 $ ssh-keygen -t rsa -C “注册邮箱”然后用户主目录/.ssh/下有两个文件，id_rsa是私钥，id_rsa.pub是公钥 2.获取key，打开.ssh下的id_rsa.pub文件，里面的内容就是key的内容 $ start ~/.ssh/id_rsa.pub 3.登录GitHub，打开”SSH Keys”页面，快捷地址：https://github.com/settings/ssh 4.测试ssh key是否成功，使用命令“ssh -T git@github.com”，如果出现You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。 二丶1.将你原来电脑上已经配置好并生成的hexo目录拷到你的新电脑上，注意无需拷全部，只拷如下几个目录：_config.yml package.json scaffolds/ source/ themes/ 将这些目录放到一个目录下，如：hexo／ 2.在你的新电脑上首先配置hexo环境：安装Node.js 3.安装hexo，执行命令： npm install -g hexo 4.安装好之后，进入hexo／目录,把U盘文件拷入hexo （注意）cnpm：因为npm安装插件是从国外服务器下载，受网络影响大，可能出现异常，如果npm的服务器在中国就好了，所以我们乐于分享的淘宝团队干了这事。来自官网：“这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。官方网址：http://npm.taobao.org；安装：命令提示符执行npm install cnpm -g –registry=https://registry.npm.taobao.org； 注意：安装完后最好查看其版本号cnpm -v或关闭命令提示符重新打开，安装完直接使用有可能会出现错误；注：cnpm跟npm用法完全一致，只是在执行命令时将npm改为cnpm（以下操作将以cnpm代替npm）。 5.模块安装，执行命令： npm install npm install hexo-deployer-git --save npm install hexo-generator-feed --save npm install hexo-generator-sitemap --save 6.部署，执行命令： hexo g hexo deploy 三丶出现的问题Hexo本地安装 都是默认的文件 命令运行了 访问4000端口出现cannot get? 运行一下 npm install]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[学习的六条经验(转)]]></title>
    <url>%2F2017%2F05%2F08%2Facticle%2F</url>
    <content type="text"><![CDATA[1.要避免骄傲，好学习他人的长处 这被放在了第一条。我们国家的教育强调竞争，不重视合作。除了抄作业，高中几乎没有什么机会可以两个人合作出来的项目。因此，对于那些在班级，年级成绩靠前，在市、省、国、国际比赛取得名次的学生，要善用自己的天赋，而不是心存骄傲。 要 避免骄傲，一是不要瞧不起成绩不如自己的同学。尽管我们的教育，到大学还是强调考试，甚至公务员也要考，英语也要考，但是在任何国家，尤其我们这儿，将来 的发展，和考试能力几乎完全没有关系。如果能够把每个同学，无论成绩好坏，都当成一个人格独立的个体，那么在十几岁的年纪里，就会形成一种先知先觉的一种 公民意识，而不会妄自尊大。 有两个很残酷的事实：第一个，就是很多竞赛得奖者，后来的职业是继续辅导竞赛。我完全尊重每个人的劳动，但是必须承认，如果这样人有如此之多（你会知道原来这么多！），其实还是很可惜，因为当你取得高级别竞赛的名次，站在全校面前倍感光荣的时候，“将来辅导其他学生”这件事儿，肯定不在你的梦想范围里。第二个现实，就是说，即使对于学习本身，竞赛的帮助并不大。一个共识是：大学入学的时候，竞赛生和非竞赛生差距比较大，但是大学毕业时，基本看不出差距，甚至很多学业最优秀的学生，都是非竞赛生。这个匪夷所思的事实，有很多原因。比如：找满足感——这些甚至都不是自己有意的，只是无意识的就会朝这里靠拢。 也许你会说，这有什么不好？每个人都可以选择他要的生活方式。 我想说，当然没什么不好，只是你这么做，就等于选择了困难模式。 有没有想过为什么讨厌的家长总是让你学习，学习？尽管他们小时候未必是那个学习好的？如果他们是那个学习好的，那他们让你学习，肯定是意识到学习的好处；如果他们不是，那多半是尝到了不学习恶果。（无意损人，请抓住主旨，勿断章取义） 既然打游戏，和学习，都可以获得满足感，那么它们两者本质的不同在哪里？ 前者不可沉淀，过去了就过去；后者却能让改变自己，给自己带来看不见的变化。并且为自己创造机会。 当然，也有打游戏到世界冠军，扮靓找来大款，打架变成拳王的。难道那样成功的概率比学习获得改善生活的机会要高吗？所以说，才是困难模式。不要因为小概率而蒙蔽自己。发达国家，那些不愁医保不愁吃穿的宅男里，天天打游戏，才可能有世界冠军，我们的出身决定了和他们拼不起。 这些和自信到底有什么关系啊？ 以上就是说，不要因为学习上不足，就失去动力而分散注意力，过早的想在其他方面表现自己；任何方面都需要足够的专业才能把表现自己变成糊口的手段，学习是最简单的一条路。 因此，看到那些成绩好的同学手执考卷，眉飞色舞，看到家长戳着自己的脑门骂人，看到老师失望的样子，都不可以放弃自己。如果想要超越，必须另辟蹊径。必须不断的努力，必须不断的寻找努力的方式（即方法），不要空谈方法，所有的方法都是实践中失败或者成功才获得的。 在成绩不如人的时候，想要超过去，就必须具备他人所没有的品质。 2.做好牺牲的准备 几乎任何事情，都是有得必有失。一个人前闪耀的明星，可能1）只是公司的一枚棋子，被迫做很多不情愿的事2）一点私生活都没有，一点小事就可能满城风雨3） 常年处于担心自己过气的焦虑和恐惧中 对 于学习，也一样。没有白来的好事，能够帮助自己突飞猛进，却还不用付出多少代价。有些人不肯付出这些代价，觉得过大家一样的生活，就挺好。有些人苦苦想进步，只是不知道怎么办。对于前者，尽到自己认为足够的努力即可；后者，即想付出又不知道该怎么做的人，或者有雄心取得更大进步的人，是真正需要本文的读 者；为了提升，就需要做好牺牲的准备。 原谅我把这几个真正大家一开始就想看的内容放到了最后，只有读到这里的人才能看到： 学习的第一条，就是要练就大脑封闭术。 不是封闭起来拒绝新知的封闭，而是要特意给大脑留下一块儿干净的空间。这个空间，不要受任何外界的干扰。即，不管情绪如何，外界或喜或悲，打开书/打开卷子，就忘掉一切，好像世界只有你和那个学习的内容。 为了达到这个终极的目标，各种方式都可能需要用到，比如听音乐，发泄，运动，和朋友交流，聊qq。。。。不知不觉，就会发现，自己把本来用于学习的时间用到了其他事情上，而且还没有多少改善。 其实并不难，人在想一件事的时候，脑子里当然想着它；为了使得大脑封闭，必须把自己的心血和精力，倾注到面前的书或其他的学习资料上。别的事情不要主动去想它，过了一会儿，书上的内容在大脑里占据的比例越来越大，就自然读进去了。 这样做的好处很多，比如不会浮躁。浮躁就是在做一件事的时候，想另外一件事。沉下来，深吸两口气，不去想那一件事，多读几句，让这个要学的内容充满大脑，让那个烦心事逐渐排空。如果有意识的这样做，即以时日，不难做到，就会专注而高效，而不会杂念纷纷了。 学习的第二条，就是要争取最多的工作时间。 原 因很简单，每个人生来有不同的模样，成长于不同的环境，实在有很多很多不公平的事，而且这些不公平往往不朝着自己这一边倾斜。。。怎么办？上天赐给了人一 样最公平的东西，就是时间。无论聪明或者愚钝，无论贫贱或者富裕，每个人每天都有24小时，即86400秒（不要扯恒星日和太阳日！），再公平不过。 试想一个男生身高1米82，那就是一个标准的美男子，有着人人趋之若鹜的高度。另一个男生1米56（无意对先天进行歧视），那不管我们多么想忽略这个事实，心里都会承认这个格子有点矮。182：156=7：6. 什么意思呢？ 如果一个人七天工作，和六天工作，其产生的差距其实是很大的，和身高的差距类似。只是对于工作上的一点，很难短期内直接看出。 也 许有人觉得个人有休闲，不要太累，就是想慢慢的，悠哉悠哉，这当然要尊重个人的自由意志；然而，如果你心里想的是，你愿意试试看这种方法，只是不知道怎么 办，那么这里是针对你而写的。也许你读了很多传记，发现政治家，成功的企业家（包含果粉的神Jobs），科学家，都是连续工作的，他们是精力充沛？还是什 么？最近有一篇文章写奥巴马，“我教你怎么当总统”。里面有一重要的条，就是要天天运动。也许有人觉得，运动不是更累吗？其实休息有两种，一种是消极的休 息（消极不等于不必要），比如睡眠，懒懒地呆在那里什么的，一种是积极的休息，就是运动。除了奥巴马，比如著名生物学家施一公非常擅长长跑，比尔盖茨也是 坚持跑步运动。。 有人说，这些人真厉害。做这么多事的同时，又天天运动，真是多面手。其实换个角度想，坚持运动正是能够完成大量工作的前提保证。运动可以增强细胞的自噬效应，可以增强心肺等器官的机能，使得人更能承受长期工作的劳累。 不敢说100%，如果查看那些那些大牛们，有很大的比例都在于运动；各种运动中，又有很大的比例在于长跑。 正因为如此，一个人才可能承受7天的工作量，反而不会疲劳。这是一个公开的秘密。 学习的第三条，就是不去想学习的目的。 所谓不去想学习的目的，并非说没有长远的理想，也不是说不要调整学习的方向，只是不要去天天问自己，“学这些干什么？有什么用？” 要经历过很多事情之后，才有可能知道学习的目的，并且每个人会形成不同的理解。 在我看来，要把每天割开来过，在学习的时候，只希望当天是最饱满的一天，做自己认为最有意义的事情，而不是拖拉到明天，或者为过去而懊恼。 这样子每天认真学习，过一定的阶段，自己的视野才能取得有所觉察的增长，然后进而调整方法和内容，并更进一步的试图确定理想；过更长的阶段，学习会带来不同的机会，使得自己对于生活的选择余地更加广阔。总而言之，学习的目的，是在学习的过程当中慢慢获得的。 如果还没开始学习，就先问目的，是一种永不可能实现的功利主义——因为不知道有什么用，所以不做。实际上的逻辑恰恰是反过来：因为没有做，所以不可能知道它的目的。]]></content>
      <categories>
        <category>小记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[html_day_01]]></title>
    <url>%2F2017%2F05%2F08%2Fheng%2F</url>
    <content type="text"><![CDATA[换行标签 &nbsp; &nbsp;&nbsp;&nbsp; &lt;br/&gt; 水平线标签 &nbsp; &lt;hr/&gt; 段落标签&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;文本内容&lt;/p&gt; 标题标签&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;h1&gt;-&lt;h6&gt;&amp;nbsp;&amp;nbsp;: 1最大 取值到h6 文本标签&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &lt;font&gt;文本内容&lt;/font&gt; 文本倾斜标签&nbsp;&lt;i&gt;&lt;/i&gt; &lt;em&gt;&lt;/em&gt; 删除线标签&nbsp;&nbsp;&nbsp;&nbsp;&lt;s&gt;&lt;/s&gt; &lt;del&gt;&lt;/del&gt; 下划线标签&nbsp;&nbsp;&nbsp;&nbsp;&lt;u&gt;&lt;/u&gt; &lt;ins&gt;&lt;/ins&gt; 图片标签 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;img src=&quot;来源（必写属性）&quot; alt=&quot;图片不显示的时候显示的文字&quot; title=&quot;鼠标放到图片上显示的文字&quot; width=&quot;宽&quot; height=&quot;高&quot;&gt; 相对路径 &nbsp;&nbsp;&nbsp;&nbsp; 下一级目录a/a.jpg上一级目录../a.jpg上一级的其他目录../a/a.jpg 总结：找到下一级目录（文件夹）的图片（文件）用 / 跳出当前目录使用../ 绝对路径&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f:\a\a\a.jpg 超链接&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;a href=&quot;去往的路径，跳转的页面（必写属性）&quot; title=&quot;鼠标放到链接上显示的文字（提示文本）&quot; target=&quot;有两个填写方式(_self默认值)在自身页面打开(_blank)打开新页面&quot;&gt;&lt;/a&gt; 锚链接&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;p id=&quot;sd&quot;&gt; 超链接到锚点 &lt;a href=&quot;#sd&quot;&gt;回到顶部&lt;/a&gt; 无序列表&lt;ul type=&quot;&quot;&gt; &lt;li&gt;&lt;/li&gt; (列表项) &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul type=”square” 小方块 type=”disc” 实心小圆圈 type=”circle” 空心小圆圈 有序列表&lt;ol&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ol&gt; type=”1,a,A,i,I” type的值可以为1,a,A,i,I start=”3” 决定了开始的位置。 自定义列表 &lt;dl&gt; &lt;dt&gt;&lt;/dt&gt; 小标题 &lt;dd&gt;&lt;/dd&gt; 解释标题 &lt;dd&gt;&lt;/dd&gt; 解释标题 &lt;/dl&gt; 音乐标签 &lt;embed src=&quot;&quot; hidden=&quot;true&quot;&gt;]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
</search>