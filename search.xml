<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[js_01]]></title>
    <url>%2F2017%2F07%2F07%2Fjs_01%2F</url>
    <content type="text"><![CDATA[JavaScript基础JavaScript介绍浏览器以及网站相关介绍 浏览器定义：可以显示网页服务器或者文件系统的HTML文件内容，并让用户与这些文件交互的一种软件 我们常规使用的五大浏览器：chorme，firefox，IE，Safari以及Oprea 从内核来看：有webkit，gecko，trident，presto 浏览器工作原理的介绍 为什么要有JavaScript？ JavaScript设计的最初目的- 判断客户端表单输入验证(以前的网速慢) - 后来被一度用于小广告 JavaScript现在的意义- 页面特效（pc端的网页特效） - 移动端（移动web和app） - 异步和服务器交互 AJAX - 服务器端开发（NodeJs） - 数据库甚至烤面包机都可以运行js了 - 另外还可以抢火车票（阿里巴巴月饼事件） 演示炫酷效果： 游戏:http://www.codecombat.cn/ 简历:http://www.webhek.com/misc/interactive-resume WebApp: http://m.kuaidi100.com/ http://m.kugou.com/index/index 打飞机 JavaScript是什么​ JavaScript 诞生于 1995 年。 它当时的目的是为了验证表单输入的验证。 因为在 JavaScript问世之前，表单的验证都是通过服务器端验证的。而当时都是电话拨号上网的年代，服务器验证数据是一件非常痛苦的事情。 ​ 1995 年， 当时工作在 Netscape(网景)公司的布兰登(Brendan Eich)为解决类似于 “向服务器提交数据之前验证”的问题。在 Netscape Navigator 2.0 与 Sun 公司联手开发一个称之为LiveScript 的脚本语言。为了营销便利，之后更名为 JavaScript JavaScript的历史总结： 1.JavaScript诞生于1995年; 2.是由网景公司布兰登艾奇开发的; 3.JavaScript前名叫LiveScript; JavaScript是一种运行在客户端 的脚本语言 客户端：即接受服务的一端，与服务端相对应，在前端开发中，通常客户端指的就是浏览器。 JavaScript的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。脚本语言：也叫解释型语言，特点是执行一行，解释一行，如果发现报错，代码就停止执行 12tips：脚本语言一般会有一个宿主环境（当前脚本运行并且起作用一个环境）类似的有：as（actionScript flash宿主环境） JavaScript和HTML、CSS的区别 HTML：提供网页的结构，提供网页中的内容 CSS: 用来美化网页 JavaScript: 可以用来控制网页内容，给网页增加动态的效果 JavaScript的组成 ECMAScript - JavaScript的核心定义了JavaScript的语法规范 JavaScript的核心，描述了语言的基本语法和数据类型，ECMAScript是一套标准，定义了一种语言的标准,与具体实现无关 BOM - 浏览器对象模型一套操作浏览器功能的API(可以理解为一套工具和方法) 通过BOM可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等 DOM - 文档对象模型一套操作页面元素的API DOM可以把HTML看做是文档树，通过DOM提供的API可以对树上的节点进行操作 JavaScript初体验JavaScript的书写位置 书写Javascript代码有三种方式，第一种是直接在script标签中书写，第二种是将代码写在js文件中，通过script进行引入。第三种为内嵌入html结构中书写js，但不利于后期代码开发和维护，不推荐； 写在script标签中 12345&lt;head&gt; &lt;script&gt; alert('Hello World!'); &lt;/script&gt;&lt;/head&gt; 写在外部js文件中，在页面引入 1&lt;script src="main.js"&gt;&lt;/script&gt; 注意点 引用外部js文件的script标签中不可以写JavaScript代码 script标签的书写位置，原则上来说，可以在页面中的任意位置书写script标签。 写在head标签中，style标签之后。 写在标签的前面。 写在的后面，即页面的最后面。 script的一些属性 language已废弃 src 表示要引入的外部文件 type 表示脚本语言的类型 （在html5的结构中可以省略不写） 计算机组成软件 应用软件：浏览器(chrome/ie/firefox)、QQ、Sublime、Word 系统软件：Windows、Linux、OSX 硬件 三大件：CPU、内存、硬盘 输入设备：鼠标、键盘、手写板、摄像头等 输出设备：显示器、打印机、投影仪等 变量什么是变量 什么是变量 变量是计算机内存中存储数据的标识符，根据变量名称可以获取到内存中存储的数据 为什么要使用变量 使用变量可以方便的获取或者修改内存中的数据 如何使用变量 var声明变量 1var age; 变量的赋值 12var age;age = 18; 同时声明多个变量 123var age, name, sex;age = 10;name = 'zs'; 同时声明多个变量并赋值 1var age = 10, name = 'zs'; 变量在内存中的存储1var age = 18; 画图演示 变量的命名规则和规范 规则 - 必须遵守的，不遵守会报错 由字母、数字、下划线、$符号组成，不能以数字开头 不能是关键字和保留字，例如：for、while。(变量名称为name的注意点) 123// 通过浏览器的控制台查看，是带引号的// name比较特殊，name是window对象的一个属性var name = 18; 区分大小写 规范 - 建议遵守的，不遵守不会报错 变量名必须有意义 遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。例如：userName、userPassword关键字保留字 案例 交换两个变量的值 不使用临时变量，交换两个数值变量的值 tips:javascript是一种弱类型语言，不管声明什么类型的变量，都是用var，并且变量的类型是可以变化的。 1234var age = 18;age = '马户';// Javascript的变量所存储的数据类型不在定义的时候确定 ，而在赋值的确定// int i=10; 注释 不被程序执行的代码。用于程序员标记代码，在后期的修改，以及他人的学习时有所帮助，在JS中，分为单行注释和多行注释 1234//这是单行注释，只能注释一行/* 这是多行注释，不能嵌套*/ 注释的作用： 1. 模块划分，方便代码查找和维护 2. 用于解释复杂代码的逻辑，方便维护和后期开发。 要求：写代码的时候必须要写注释 不加注释是不道德的 【永无bug.js】 数据类型 数据类型学习目标:掌握四种常用的数据类型 简单(基本、值)数据类型 Number（数字类型）、String（字符串）、Boolean（布尔类型）Undefined、Null（特殊类型） 复杂(引用)数据类型（暂时了解 object 如何查看数据类型使用typeof关键字查看数据类型 12typeof name;typeof(name); Number类型 数值字面量：数值的固定值的表示法 6 7 110 进制 123456789101112十进制 var num = 9; 进行算数计算时，八进制和十六进制表示的数值最终都将被转换成十进制数值。十六进制 var num = 0xA; 数字序列范围：0~9以及A~F八进制 var num1 = 07; // 对应十进制的7 var num2 = 019; // 对应十进制的19 var num3 = 08; // 对应十进制的8 数字序列范围：0~7 如果字面值中的数值超出了范围，那么前导零将被忽略，后面的数值将被当作十进制数值解析 浮点数 科学计数法： 123var num = 5e+3; // 5*10^3var num1 = 5e-2;// 5*10^-2//如何表示0.003和20000? 浮点数的精度问题： 120.1 + 0.2 = ?0.07 * 100 = ? ​浮点数在运算的时候会出现精度丢失的问题，因此在做比较运算的时候，尽量不要用小数进行比较。 数值范围 由于内存的限制，ECMAScript 并不能保存世界上所有的数值。JavaScript不能表示世界上所有的数，因此在JavaScript中，数值大小是有一定限制的。 1234最小值：Number.MIN_VALUE，这个值为： 5e-324最大值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308无穷大：Infinity无穷小：-Infinity 画图演示 数值判断 123456781. NaN:表示一个非数值，当无法运算或者运算错误的时候，会得到一个NaN，NaN是number类型，表示一个非数值。2. NaN不等于NaN3. isNaN用来判断是否是一个数字，当返回true的时候，表示不是一个数字，返回false表示是一个数字。练习： isNaN(NaN); isNaN(“blue”); isNaN(123); String类型 字符串字面量 字符串的字面量：“abc” 、 ‘abc’ 字符串可以是双引号，也可以是单引号引起来。 ‘程序猿’，’程序媛’, “黑马程序猿” ​ 思考：如何打印以下字符串。 我是一个”正直”的人 我很喜欢”传’智’播客” 转义符 字符串长度 length属性用来获取字符串的长度 12var str = '黑马程序猿 Hello World';console.log(str.length); 字符串的不可变性画图演示 字符串拼接 字符串拼接使用 + 连接 12345console.log(11 + 11);console.log('hello' + ' world');console.log('100' + '100');console.log('11' + 11);console.log('male:' + true); 两边只要有一个是字符串，那么+就是字符串拼接功能 两边如果都是数字，那么就是算术功能。 boolean类型 boolean字面量： true和false，区分大小写 计算机内部存储：true为1，false为0 undefined和null undefined表示一个声明了没有赋值的变量，变量只声明的时候值默认是undefined null表示一个空，变量的值如果想为null，必须手动设置 字面量在源代码中一个固定值的表示法。 数值字面量：8, 9, 10 字符串字面量：’黑马程序员’, “大前端” 布尔字面量：true，false 数据类型转换如何使用谷歌浏览器，快速的查看数据类型？ 字符串的颜色是黑色的，数值类型是蓝色的，布尔类型也是浅紫色的，undefined和null是灰色的 转换成字符串类型 toString() 12var num = 5;console.log(num.toString()); String() 1String()函数存在的意义：有些值没有toString()，这个时候可以使用String()。比如：undefined和null 拼接字符串方式 num + “”，当 + 两边一个操作符是字符串类型，一个操作符是其它类型的时候，会先把其它类型转换成字符串再进行字符串拼接，返回字符串 转换成数值类型 Number() 1234567891011Number()可以把任意值转换成数值，如果要转换的字符串中有一个不是数值的字符，返回NaN练习一下： var num1 = Number(true); var num2 = Number(undefined); var num3 = Number(&quot;hello&quot;); var num4 = Number(&quot; &quot;); var num5 = Number(123); var num6 = Number(&quot;123abc&quot;); var num7 = Number(&quot;abc123&quot;); var num8 = Number(null); parseInt() 12var num1 = parseInt("12.3abc"); // 返回12，如果第一个字符是数字会解析知道遇到非数字结束var num2 = parseInt("abc123"); // 返回NaN，如果第一个字符不是数字或者符号就返回NaN parseFloat() 1parseFloat()把字符串转换成浮点数 +，-0等运算 1234var str = '500';console.log(+str); // 取正console.log(-str); // 取负console.log(str - 0); 转换成布尔类型 Boolean()代码演示 流程控制语句中会隐式转换 操作符 算术运算符1234567891011+ 加法运算符 如果运算符，有一个操作数为字符串则将另一个操作数转换成字符串然后再将两个字符 拼接 例如： var str = &quot;abc&quot; + 123; //返回&quot;abc123&quot; - 减法运算符 * 乘法运算符 / 除法运算符 % 求模(取余)运算符 / 除0，返回Infinity % 取余，返回NaN 赋值运算符= += -= *= /= 例如: var num = 0; num+=5;(相当于 num = num + 5); 一元运算符常识: 只能操作一个值的操作符叫一元操作符,组成的表达式叫一元表达式.(一个值一个运算符) 由两个值和一个运算符连接起来的表达式叫二元表达式。(两个值一个运算符) 由三个值和两个运算符连接起来的表达式叫三元表达式.(三个值两个运算符) 一元运算符分为前置型和后置型 区别：在于前置型先自增或者自减 后将结果参与运算;后置型为先参与运算 ，然后在自增或自减; ++、– 前置++ 1234var num1 = 5;++ num1;var num2 = 6;console.log(num1 + ++ num2); 后置++ 1234var num1 = 5;num1 ++;var num2 = 6 console.log(num1 + num2 ++); 猜猜看 1234var a = 1; var b = ++a + ++a; console.log(b); var a = 1; var b = a++ + ++a; console.log(b); var a = 1; var b = a++ + a++; console.log(b); var a = 1; var b = ++a + a++; console.log(b); 12var k=-2;alert(++k + k++ + ++k + k); 比较运算符&lt; &gt; &gt;= &lt;= == != === !== 比较规则： 两边都为字符串时，则按照字符串的字符编码进行逐位比较 一边为数字，一边为字符串时，则将字符串转换为数字进行比较 一边为数字，一边为布尔值时，则将布尔值转换为数字进行比较 12345==与===的区别：==只进行值得比较，===类型和值同时相等，则相等var result = '55' == 55; //truevar result = '55' === 55; //false 值相等，类型不相等var result = 55 === 55; //true 逻辑运算符&amp;&amp; 两个操作数同时为true，结果为true，否则都是false || 两个操作数有一个为true，结果为true，否则为false ! 取反 12345678910111213141516171819// 练习 var aa = 0&amp;&amp;1;alert(aa)var bb = 1&amp;&amp;0;alert(bb);var cc = 1&amp;&amp;10;alert(cc);console.log(0||1);console.log(1||0);console.log(1||5);console.log(5||1);var a = 3 &amp;&amp; 0 || 2; var b = 3 || 0 &amp;&amp; 2; var c= 0 || 2 &amp;&amp; 3; alert(a),alert(b),alert(c); 1234567// 面试题var a = 1+1 &amp;&amp; 3;var b = 0 &amp;&amp; 1+1; var c = 1 || 2 &amp;&amp; 3-1;alert(a);alert(b);alert(c); 运算符的优先级优先级从高到底 1. () 优先级最高 2. 一元运算符 ++ -- ! 3. 算数运算符 先* / % 后 + - 4. 关系运算符 &gt; &gt;= &lt; &lt;= 5. 相等运算符 == != === !== 6. 逻辑运算符 先&amp;&amp; 后|| 7. 赋值运算符 1234567// 练习1：((4 &gt;= 6) || ('人' != '阿凡达')) &amp;&amp; !(((12 * 2) == 144) &amp;&amp; true) // 练习2：var num = 10;if (5 == num / 2 &amp;&amp; (2 + 2 * num).toString() === '22') &#123; console.log(true);&#125;]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo经验]]></title>
    <url>%2F2017%2F05%2F11%2F1%20-%20%E5%89%AF%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[html代码块两个tab]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[重装（异地hexo）]]></title>
    <url>%2F2017%2F05%2F11%2F%E5%BC%82%E5%9C%B0hexo%2F</url>
    <content type="text"><![CDATA[重装系统之后hexo更新 安装git与node.js （注意版本） 一丶git本地仓库与github远成仓库关联1.Windows下打开Git Bash，创建SSH Key，按提示输入密码，可以不填密码一路回车 $ ssh-keygen -t rsa -C “注册邮箱”然后用户主目录/.ssh/下有两个文件，id_rsa是私钥，id_rsa.pub是公钥 2.获取key，打开.ssh下的id_rsa.pub文件，里面的内容就是key的内容 $ start ~/.ssh/id_rsa.pub 3.登录GitHub，打开”SSH Keys”页面，快捷地址：https://github.com/settings/ssh 4.测试ssh key是否成功，使用命令“ssh -T git@github.com”，如果出现You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。 二丶1.将你原来电脑上已经配置好并生成的hexo目录拷到你的新电脑上，注意无需拷全部，只拷如下几个目录：_config.yml package.json scaffolds/ source/ themes/ 将这些目录放到一个目录下，如：hexo／ 2.在你的新电脑上首先配置hexo环境：安装Node.js 3.安装hexo，执行命令： npm install -g hexo 4.安装好之后，进入hexo／目录,把U盘文件拷入hexo （注意）cnpm：因为npm安装插件是从国外服务器下载，受网络影响大，可能出现异常，如果npm的服务器在中国就好了，所以我们乐于分享的淘宝团队干了这事。来自官网：“这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。官方网址：http://npm.taobao.org；安装：命令提示符执行npm install cnpm -g –registry=https://registry.npm.taobao.org； 注意：安装完后最好查看其版本号cnpm -v或关闭命令提示符重新打开，安装完直接使用有可能会出现错误；注：cnpm跟npm用法完全一致，只是在执行命令时将npm改为cnpm（以下操作将以cnpm代替npm）。 5.模块安装，执行命令： npm install npm install hexo-deployer-git --save npm install hexo-generator-feed --save npm install hexo-generator-sitemap --save 6.部署，执行命令： hexo g hexo deploy 三丶出现的问题Hexo本地安装 都是默认的文件 命令运行了 访问4000端口出现cannot get? 运行一下 npm install]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[学习的六条经验(转)]]></title>
    <url>%2F2017%2F05%2F08%2Facticle%2F</url>
    <content type="text"><![CDATA[1.要避免骄傲，好学习他人的长处 这被放在了第一条。我们国家的教育强调竞争，不重视合作。除了抄作业，高中几乎没有什么机会可以两个人合作出来的项目。因此，对于那些在班级，年级成绩靠前，在市、省、国、国际比赛取得名次的学生，要善用自己的天赋，而不是心存骄傲。 要 避免骄傲，一是不要瞧不起成绩不如自己的同学。尽管我们的教育，到大学还是强调考试，甚至公务员也要考，英语也要考，但是在任何国家，尤其我们这儿，将来 的发展，和考试能力几乎完全没有关系。如果能够把每个同学，无论成绩好坏，都当成一个人格独立的个体，那么在十几岁的年纪里，就会形成一种先知先觉的一种 公民意识，而不会妄自尊大。 有两个很残酷的事实：第一个，就是很多竞赛得奖者，后来的职业是继续辅导竞赛。我完全尊重每个人的劳动，但是必须承认，如果这样人有如此之多（你会知道原来这么多！），其实还是很可惜，因为当你取得高级别竞赛的名次，站在全校面前倍感光荣的时候，“将来辅导其他学生”这件事儿，肯定不在你的梦想范围里。第二个现实，就是说，即使对于学习本身，竞赛的帮助并不大。一个共识是：大学入学的时候，竞赛生和非竞赛生差距比较大，但是大学毕业时，基本看不出差距，甚至很多学业最优秀的学生，都是非竞赛生。这个匪夷所思的事实，有很多原因。比如：找满足感——这些甚至都不是自己有意的，只是无意识的就会朝这里靠拢。 也许你会说，这有什么不好？每个人都可以选择他要的生活方式。 我想说，当然没什么不好，只是你这么做，就等于选择了困难模式。 有没有想过为什么讨厌的家长总是让你学习，学习？尽管他们小时候未必是那个学习好的？如果他们是那个学习好的，那他们让你学习，肯定是意识到学习的好处；如果他们不是，那多半是尝到了不学习恶果。（无意损人，请抓住主旨，勿断章取义） 既然打游戏，和学习，都可以获得满足感，那么它们两者本质的不同在哪里？ 前者不可沉淀，过去了就过去；后者却能让改变自己，给自己带来看不见的变化。并且为自己创造机会。 当然，也有打游戏到世界冠军，扮靓找来大款，打架变成拳王的。难道那样成功的概率比学习获得改善生活的机会要高吗？所以说，才是困难模式。不要因为小概率而蒙蔽自己。发达国家，那些不愁医保不愁吃穿的宅男里，天天打游戏，才可能有世界冠军，我们的出身决定了和他们拼不起。 这些和自信到底有什么关系啊？ 以上就是说，不要因为学习上不足，就失去动力而分散注意力，过早的想在其他方面表现自己；任何方面都需要足够的专业才能把表现自己变成糊口的手段，学习是最简单的一条路。 因此，看到那些成绩好的同学手执考卷，眉飞色舞，看到家长戳着自己的脑门骂人，看到老师失望的样子，都不可以放弃自己。如果想要超越，必须另辟蹊径。必须不断的努力，必须不断的寻找努力的方式（即方法），不要空谈方法，所有的方法都是实践中失败或者成功才获得的。 在成绩不如人的时候，想要超过去，就必须具备他人所没有的品质。 2.做好牺牲的准备 几乎任何事情，都是有得必有失。一个人前闪耀的明星，可能1）只是公司的一枚棋子，被迫做很多不情愿的事2）一点私生活都没有，一点小事就可能满城风雨3） 常年处于担心自己过气的焦虑和恐惧中 对 于学习，也一样。没有白来的好事，能够帮助自己突飞猛进，却还不用付出多少代价。有些人不肯付出这些代价，觉得过大家一样的生活，就挺好。有些人苦苦想进步，只是不知道怎么办。对于前者，尽到自己认为足够的努力即可；后者，即想付出又不知道该怎么做的人，或者有雄心取得更大进步的人，是真正需要本文的读 者；为了提升，就需要做好牺牲的准备。 原谅我把这几个真正大家一开始就想看的内容放到了最后，只有读到这里的人才能看到： 学习的第一条，就是要练就大脑封闭术。 不是封闭起来拒绝新知的封闭，而是要特意给大脑留下一块儿干净的空间。这个空间，不要受任何外界的干扰。即，不管情绪如何，外界或喜或悲，打开书/打开卷子，就忘掉一切，好像世界只有你和那个学习的内容。 为了达到这个终极的目标，各种方式都可能需要用到，比如听音乐，发泄，运动，和朋友交流，聊qq。。。。不知不觉，就会发现，自己把本来用于学习的时间用到了其他事情上，而且还没有多少改善。 其实并不难，人在想一件事的时候，脑子里当然想着它；为了使得大脑封闭，必须把自己的心血和精力，倾注到面前的书或其他的学习资料上。别的事情不要主动去想它，过了一会儿，书上的内容在大脑里占据的比例越来越大，就自然读进去了。 这样做的好处很多，比如不会浮躁。浮躁就是在做一件事的时候，想另外一件事。沉下来，深吸两口气，不去想那一件事，多读几句，让这个要学的内容充满大脑，让那个烦心事逐渐排空。如果有意识的这样做，即以时日，不难做到，就会专注而高效，而不会杂念纷纷了。 学习的第二条，就是要争取最多的工作时间。 原 因很简单，每个人生来有不同的模样，成长于不同的环境，实在有很多很多不公平的事，而且这些不公平往往不朝着自己这一边倾斜。。。怎么办？上天赐给了人一 样最公平的东西，就是时间。无论聪明或者愚钝，无论贫贱或者富裕，每个人每天都有24小时，即86400秒（不要扯恒星日和太阳日！），再公平不过。 试想一个男生身高1米82，那就是一个标准的美男子，有着人人趋之若鹜的高度。另一个男生1米56（无意对先天进行歧视），那不管我们多么想忽略这个事实，心里都会承认这个格子有点矮。182：156=7：6. 什么意思呢？ 如果一个人七天工作，和六天工作，其产生的差距其实是很大的，和身高的差距类似。只是对于工作上的一点，很难短期内直接看出。 也 许有人觉得个人有休闲，不要太累，就是想慢慢的，悠哉悠哉，这当然要尊重个人的自由意志；然而，如果你心里想的是，你愿意试试看这种方法，只是不知道怎么 办，那么这里是针对你而写的。也许你读了很多传记，发现政治家，成功的企业家（包含果粉的神Jobs），科学家，都是连续工作的，他们是精力充沛？还是什 么？最近有一篇文章写奥巴马，“我教你怎么当总统”。里面有一重要的条，就是要天天运动。也许有人觉得，运动不是更累吗？其实休息有两种，一种是消极的休 息（消极不等于不必要），比如睡眠，懒懒地呆在那里什么的，一种是积极的休息，就是运动。除了奥巴马，比如著名生物学家施一公非常擅长长跑，比尔盖茨也是 坚持跑步运动。。 有人说，这些人真厉害。做这么多事的同时，又天天运动，真是多面手。其实换个角度想，坚持运动正是能够完成大量工作的前提保证。运动可以增强细胞的自噬效应，可以增强心肺等器官的机能，使得人更能承受长期工作的劳累。 不敢说100%，如果查看那些那些大牛们，有很大的比例都在于运动；各种运动中，又有很大的比例在于长跑。 正因为如此，一个人才可能承受7天的工作量，反而不会疲劳。这是一个公开的秘密。 学习的第三条，就是不去想学习的目的。 所谓不去想学习的目的，并非说没有长远的理想，也不是说不要调整学习的方向，只是不要去天天问自己，“学这些干什么？有什么用？” 要经历过很多事情之后，才有可能知道学习的目的，并且每个人会形成不同的理解。 在我看来，要把每天割开来过，在学习的时候，只希望当天是最饱满的一天，做自己认为最有意义的事情，而不是拖拉到明天，或者为过去而懊恼。 这样子每天认真学习，过一定的阶段，自己的视野才能取得有所觉察的增长，然后进而调整方法和内容，并更进一步的试图确定理想；过更长的阶段，学习会带来不同的机会，使得自己对于生活的选择余地更加广阔。总而言之，学习的目的，是在学习的过程当中慢慢获得的。 如果还没开始学习，就先问目的，是一种永不可能实现的功利主义——因为不知道有什么用，所以不做。实际上的逻辑恰恰是反过来：因为没有做，所以不可能知道它的目的。]]></content>
      <categories>
        <category>小记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[html_day_01]]></title>
    <url>%2F2017%2F05%2F08%2Fheng%2F</url>
    <content type="text"><![CDATA[换行标签 &nbsp; &nbsp;&nbsp;&nbsp; &lt;br/&gt; 水平线标签 &nbsp; &lt;hr/&gt; 段落标签&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;文本内容&lt;/p&gt; 标题标签&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;h1&gt;-&lt;h6&gt;&amp;nbsp;&amp;nbsp;: 1最大 取值到h6 文本标签&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &lt;font&gt;文本内容&lt;/font&gt; 文本倾斜标签&nbsp;&lt;i&gt;&lt;/i&gt; &lt;em&gt;&lt;/em&gt; 删除线标签&nbsp;&nbsp;&nbsp;&nbsp;&lt;s&gt;&lt;/s&gt; &lt;del&gt;&lt;/del&gt; 下划线标签&nbsp;&nbsp;&nbsp;&nbsp;&lt;u&gt;&lt;/u&gt; &lt;ins&gt;&lt;/ins&gt; 图片标签 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;img src=&quot;来源（必写属性）&quot; alt=&quot;图片不显示的时候显示的文字&quot; title=&quot;鼠标放到图片上显示的文字&quot; width=&quot;宽&quot; height=&quot;高&quot;&gt; 相对路径 &nbsp;&nbsp;&nbsp;&nbsp; 下一级目录a/a.jpg上一级目录../a.jpg上一级的其他目录../a/a.jpg 总结：找到下一级目录（文件夹）的图片（文件）用 / 跳出当前目录使用../ 绝对路径&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f:\a\a\a.jpg 超链接&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;a href=&quot;去往的路径，跳转的页面（必写属性）&quot; title=&quot;鼠标放到链接上显示的文字（提示文本）&quot; target=&quot;有两个填写方式(_self默认值)在自身页面打开(_blank)打开新页面&quot;&gt;&lt;/a&gt; 锚链接&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;p id=&quot;sd&quot;&gt; 超链接到锚点 &lt;a href=&quot;#sd&quot;&gt;回到顶部&lt;/a&gt; 无序列表&lt;ul type=&quot;&quot;&gt; &lt;li&gt;&lt;/li&gt; (列表项) &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul type=”square” 小方块 type=”disc” 实心小圆圈 type=”circle” 空心小圆圈 有序列表&lt;ol&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ol&gt; type=”1,a,A,i,I” type的值可以为1,a,A,i,I start=”3” 决定了开始的位置。 自定义列表 &lt;dl&gt; &lt;dt&gt;&lt;/dt&gt; 小标题 &lt;dd&gt;&lt;/dd&gt; 解释标题 &lt;dd&gt;&lt;/dd&gt; 解释标题 &lt;/dl&gt; 音乐标签 &lt;embed src=&quot;&quot; hidden=&quot;true&quot;&gt;]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
</search>